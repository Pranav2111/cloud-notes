{"ast":null,"code":"var _jsxFileName = \"/Users/pranavpatil/Cloud Notes/cloudnotes/backend/client/src/context/notes/NoteState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport NoteContext from \"./NoteContext\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NoteState = props => {\n  _s();\n\n  // const host = `https://cloudnotes123.herokuapp.com`;\n  const host = 'http://localhost:5000';\n  const notestInitial = [];\n  const [notes, setNotes] = useState(notestInitial); // Get all notes\n\n  const getnotes = async () => {\n    const response = await fetch(`${host}/api/notes/fetchnotes`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-tocken': localStorage.getItem('tocken')\n      }\n    });\n    const json = await response.json(); // console.log(json);\n\n    setNotes(json);\n  }; //Add note\n  //-----------------------------------------------------------------------------\n\n\n  const add = async data => {\n    console.log(data); // const response = await fetch(`${host}/api/notes/addnote`, {\n    //   method: 'POST',\n    //   headers: {\n    //     'Content-Type': 'application/json',\n    //     'auth-tocken': localStorage.getItem('tocken')\n    //   },\n    //   body: JSON.stringify({title, description, tag, })\n    // });\n    // console.log(response);\n    // const newnote = await response.json();\n    // setNotes(notes.concat(newnote));\n  }; //-----------------------------------------------------------------------------\n\n\n  const addnote = async (title, description, tag) => {\n    const response = await fetch(`${host}/api/notes/addnote`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-tocken': localStorage.getItem('tocken')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    console.log(response);\n    const newnote = await response.json();\n    setNotes(notes.concat(newnote));\n  }; // Edit note\n\n\n  const editnote = async (id, title, description, tag) => {\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-tocken': localStorage.getItem('tocken')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    console.log(response);\n\n    for (let index = 0; index < notes.length; index++) {\n      const element = notes[index];\n\n      if (element._id === id) {\n        notes[index].title = title;\n        notes[index].description = description;\n        notes[index].tag = tag;\n        break;\n      }\n    }\n\n    setNotes(notes);\n  }; // deleting note\n\n\n  const deletenote = async id => {\n    const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-tocken': localStorage.getItem('tocken')\n      }\n    });\n    console.log(response);\n    const newnotes = notes.filter(note => {\n      return note._id !== id;\n    }); // console.log(`\"deleting ${id}\"`);\n\n    setNotes(newnotes);\n  };\n\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      addnote,\n      editnote,\n      deletenote,\n      getnotes,\n      add\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NoteState, \"gNF+wal72qBG3iqqiA49CuJe2Jc=\");\n\n_c = NoteState;\nexport default NoteState;\n\nvar _c;\n\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"sources":["/Users/pranavpatil/Cloud Notes/cloudnotes/backend/client/src/context/notes/NoteState.js"],"names":["React","useState","NoteContext","axios","NoteState","props","host","notestInitial","notes","setNotes","getnotes","response","fetch","method","headers","localStorage","getItem","json","add","data","console","log","addnote","title","description","tag","body","JSON","stringify","newnote","concat","editnote","id","index","length","element","_id","deletenote","newnotes","filter","note","children"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport NoteContext from \"./NoteContext\";\nimport axios from 'axios';\n\nconst NoteState = (props) => {\n\n  // const host = `https://cloudnotes123.herokuapp.com`;\n  const host = 'http://localhost:5000'\n\n  const notestInitial = []\n\n  const [notes, setNotes] = useState(notestInitial);\n\n  \n  // Get all notes\n  const getnotes = async () => {\n\n\n    const response = await fetch(`${host}/api/notes/fetchnotes`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-tocken': localStorage.getItem('tocken')\n      },\n      \n    });\n    const json = await response.json();\n    // console.log(json);\n    setNotes(json);\n\n  }\n\n  //Add note\n\n\n  //-----------------------------------------------------------------------------\n\n  const add = async (data) => {\n\n    console.log(data);\n    // const response = await fetch(`${host}/api/notes/addnote`, {\n    //   method: 'POST',\n    //   headers: {\n    //     'Content-Type': 'application/json',\n    //     'auth-tocken': localStorage.getItem('tocken')\n    //   },\n    //   body: JSON.stringify({title, description, tag, })\n    // });\n    // console.log(response);\n    // const newnote = await response.json();\n\n    // setNotes(notes.concat(newnote));\n\n  }\n\n\n  \n\n\n\n  //-----------------------------------------------------------------------------\n  const addnote = async (title, description, tag) => {\n\n    const response = await fetch(`${host}/api/notes/addnote`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-tocken': localStorage.getItem('tocken')\n      },\n      body: JSON.stringify({title, description, tag})\n    });\n    console.log(response);\n    const newnote = await response.json();\n\n    setNotes(notes.concat(newnote));\n\n  }\n\n  // Edit note\n  const editnote = async (id, title, description, tag) => {\n\n\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-tocken': localStorage.getItem('tocken')\n      },\n      body: JSON.stringify({ title, description, tag })\n    });\n    console.log(response);\n\n    for (let index = 0; index < notes.length; index++) {\n      const element = notes[index];\n      if (element._id === id) {\n        notes[index].title = title\n        notes[index].description = description\n        notes[index].tag = tag\n        break;\n      }\n    }\n\n    setNotes(notes);\n\n\n  }\n\n  // deleting note\n  const deletenote = async(id) => {\n\n    const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-tocken': localStorage.getItem('tocken')\n      },\n      \n    });\n    console.log(response);\n   \n\n    const newnotes = notes.filter((note) => { return (note._id !== id) })\n    // console.log(`\"deleting ${id}\"`);\n    setNotes(newnotes);\n  }\n\n\n  return (\n    <NoteContext.Provider value={{ notes, addnote, editnote, deletenote, getnotes ,add}}>\n      {props.children}\n    </NoteContext.Provider>\n  )\n}\n\nexport default NoteState;"]},"metadata":{},"sourceType":"module"}