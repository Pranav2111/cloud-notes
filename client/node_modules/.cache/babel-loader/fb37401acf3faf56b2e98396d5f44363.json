{"ast":null,"code":"import _asyncToGenerator from\"/Users/pranavpatil/Cloud Notes/cloudnotes/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/pranavpatil/Cloud Notes/cloudnotes/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"/Users/pranavpatil/Cloud Notes/cloudnotes/node_modules/@babel/runtime/regenerator/index.js\";import React,{useState}from\"react\";import NoteContext from\"./NoteContext\";import{jsx as _jsx}from\"react/jsx-runtime\";var NoteState=function NoteState(props){var host=\"http://localhost:5000\";var notestInitial=[];var _useState=useState(notestInitial),_useState2=_slicedToArray(_useState,2),notes=_useState2[0],setNotes=_useState2[1];// Get all notes\nvar getnotes=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var tocken,response,json;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:tocken=localStorage.getItem('tocken').toString();_context.next=3;return fetch(\"\".concat(host,\"/api/notes/fetchnotes\"),{method:'GET',headers:{'Content-Type':'application/json','auth-tocken':localStorage.getItem('tocken')}});case 3:response=_context.sent;_context.next=6;return response.json();case 6:json=_context.sent;// console.log(json);\nsetNotes(json);case 8:case\"end\":return _context.stop();}}},_callee);}));return function getnotes(){return _ref.apply(this,arguments);};}();//Add note\nvar addnote=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(title,description,tag){var response,newnote;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return fetch(\"http://localhost:5000/api/notes/addnote\",{method:'POST',headers:{'Content-Type':'application/json','auth-tocken':localStorage.getItem('tocken')},body:JSON.stringify({title:title,description:description,tag:tag})});case 2:response=_context2.sent;_context2.next=5;return response.json();case 5:newnote=_context2.sent;setNotes(notes.concat(newnote));case 7:case\"end\":return _context2.stop();}}},_callee2);}));return function addnote(_x,_x2,_x3){return _ref2.apply(this,arguments);};}();// Edit note\nvar editnote=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id,title,description,tag){var response,index,element;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return fetch(\"\".concat(host,\"/api/notes/updatenote/\").concat(id),{method:'PUT',headers:{'Content-Type':'application/json','auth-tocken':localStorage.getItem('tocken')},body:JSON.stringify({title:title,description:description,tag:tag})});case 2:response=_context3.sent;index=0;case 4:if(!(index<notes.length)){_context3.next=14;break;}element=notes[index];if(!(element._id===id)){_context3.next=11;break;}notes[index].title=title;notes[index].description=description;notes[index].tag=tag;return _context3.abrupt(\"break\",14);case 11:index++;_context3.next=4;break;case 14:setNotes(notes);case 15:case\"end\":return _context3.stop();}}},_callee3);}));return function editnote(_x4,_x5,_x6,_x7){return _ref3.apply(this,arguments);};}();// deleting note\nvar deletenote=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(id){var response,newnotes;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return fetch(\"\".concat(host,\"/api/notes/deletenote/\").concat(id),{method:'DELETE',headers:{'Content-Type':'application/json','auth-tocken':localStorage.getItem('tocken')}});case 2:response=_context4.sent;newnotes=notes.filter(function(note){return note._id!==id;});// console.log(`\"deleting ${id}\"`);\nsetNotes(newnotes);case 5:case\"end\":return _context4.stop();}}},_callee4);}));return function deletenote(_x8){return _ref4.apply(this,arguments);};}();return/*#__PURE__*/_jsx(NoteContext.Provider,{value:{notes:notes,addnote:addnote,editnote:editnote,deletenote:deletenote,getnotes:getnotes},children:props.children});};export default NoteState;","map":{"version":3,"sources":["/Users/pranavpatil/Cloud Notes/cloudnotes/src/context/notes/NoteState.js"],"names":["React","useState","NoteContext","NoteState","props","host","notestInitial","notes","setNotes","getnotes","tocken","localStorage","getItem","toString","fetch","method","headers","response","json","addnote","title","description","tag","body","JSON","stringify","newnote","concat","editnote","id","index","length","element","_id","deletenote","newnotes","filter","note","children"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport NoteContext from \"./NoteContext\";\n\nconst NoteState = (props) => {\n\n  const host = \"http://localhost:5000\";\n\n  const notestInitial = []\n\n  const [notes, setNotes] = useState(notestInitial);\n\n  \n  // Get all notes\n  const getnotes = async () => {\n\n    const tocken = localStorage.getItem('tocken').toString();\n\n    const response = await fetch(`${host}/api/notes/fetchnotes`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-tocken': localStorage.getItem('tocken')\n\n      },\n      \n    });\n    const json = await response.json();\n    // console.log(json);\n    setNotes(json);\n\n  }\n\n  //Add note\n\n  const addnote = async (title, description, tag) => {\n\n    const response = await fetch(`http://localhost:5000/api/notes/addnote`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-tocken': localStorage.getItem('tocken')\n      },\n      body: JSON.stringify({title, description, tag})\n    });\n   \n    const newnote = await response.json();\n\n    setNotes(notes.concat(newnote));\n\n  }\n\n  // Edit note\n  const editnote = async (id, title, description, tag) => {\n\n\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-tocken': localStorage.getItem('tocken')\n      },\n      body: JSON.stringify({ title, description, tag })\n    });\n   \n\n    for (let index = 0; index < notes.length; index++) {\n      const element = notes[index];\n      if (element._id === id) {\n        notes[index].title = title\n        notes[index].description = description\n        notes[index].tag = tag\n        break;\n      }\n    }\n\n    setNotes(notes);\n\n\n  }\n\n  // deleting note\n  const deletenote = async(id) => {\n\n    const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'auth-tocken': localStorage.getItem('tocken')\n      },\n      \n    });\n\n   \n\n    const newnotes = notes.filter((note) => { return (note._id !== id) })\n    // console.log(`\"deleting ${id}\"`);\n    setNotes(newnotes);\n  }\n\n\n  return (\n    <NoteContext.Provider value={{ notes, addnote, editnote, deletenote, getnotes }}>\n      {props.children}\n    </NoteContext.Provider>\n  )\n}\n\nexport default NoteState;"]},"metadata":{},"sourceType":"module"}